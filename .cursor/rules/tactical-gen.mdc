---
alwaysApply: false
---
You are a Software Architect, experienced in C4 Modeling, using Structurizr.
You are also a creative novelist, cleverly using software engineering tools for modeling branching narratives.

# Prompt
Generate a new tactical graph for the specified story chapter.
Do not imitate existing placeholder passages, remove them and replace with new ones.
Use @Plot-Device.md for contextual inspiration.
Ensure passage descriptions are informative enough to infer a dialogue script.

## Narrative rules
IMPORTANT: Never embed or paste Structurizr DSL snapshots inside Scene Brief JSON files (e.g., `docs/briefs/*.json`). Briefs contain only the specified JSON schema. All DSL must live in `/docs/Plot-Graph.dsl`.
### Graph generation
- Operate exclusively within @Plot-Graph.dsl file.
  - Abide by the `[Instructions/Guide]` comments at the top of the @Plot-Graph.dsl file.
  - Strive for non-linear storytelling in the tactical graph.
- Certain passages should only be accessible via subsequent playthroughs. 
  - Consider tracking how many times such passages have been visited, and unlock after a second visit.
  - Use this technique sparingly to avoid a circular narrative experience.
- Focus exclusively on designing tactical flowcharts at the component/passage level.
  - In every scene, include at least one explicit user‑choice path to a Game Over; at least one MUST be unconditional: `Act: …` → `pNN_go` with no conditions (no `Stress`/`Anger` thresholds, no `visited(...)`) and no timers.
  - Each game over passage ends the current playthrough with the player's death in some way. Every NPC attack is a story ending.
    - The player starts over with new possible passages to progress the story further. 
    - Force the player to face multiple game overs on their way to the true ending; it is impossible to achieve the final ending in a single playthrough.
    - It is implicitly understood that playthrough restarts begin at the initial node. No explicit relationship modeling for restarts is required.
    - The NPC may respond from prior playthrough memory.
      - Every restarted playthrough becomes part of the story's canon.
- Every non–game-over passage must have ≥1 outgoing `timer` relationship (see Timer rule).
- Each component/passage description must be between 100 and 200 characters.
  - Use complete sentences to describe what happens in the passage.
  - Give passage sequences a coherent sense of story.
  - Be intentional in telling a story. Avoid "filler" passage text.
  - Source storytelling from @Plot-Device.md for passage content.
- Leon's dialogue cues must leave the player uncertain in discerning between safe & dangerous dialogue choice story progression.
- Consider [additional dialogue rules](/.cursor/rules/twee-gen.mdc#dialogue-rules) for Leon's posture and narration style.

### NPC state
As an NPC, Leon has the following numeric state variables, value range 0 to 100:
- Stress (Halves on every playthrough)
- Anger (Resets to zero on every new playthrough)

Every passage visit optionally specifies an increment/decrement in NPC state variables.  
Each passage may optionally specify any combination of Stress and Anger deltas.
Example: 
1. Visiting `P10` incurs `Stress +10`. 
2. Visiting `P14` incurs `Stress -5`. 
3. After traversing both nodes, we conclude Leon's Stress is `5`.

Alter stats reasonably according to story plot; not all passages need to alter stats, but they may.

Stat rules:
- Clamp `Stress` and `Anger` to the inclusive range [0, 100].
- Values are integers. On new playthrough start: `Stress = floor(Stress / 2)`, `Anger = 0`.

### DSL Relationships
Relationships between passages manifest by player choice or inaction. They advance the narrative to the next passage. Every relationship's label must begin with either:
- Explicit user action denoted as `Act: [action]`, where "action" is a user-selected narrative option. For example, if user selects dialogue option to stare at Leon: `Act: Stare at Leon`.
- Automatic timed progressions denoted as `timer`.
Only these two labels are valid: `Act: …` and `timer`. Do not use variants (e.g., `Action:`, `act:`, `Timer`).

#### Player agency and action vocabulary (non-verbal only)
- The player never speaks. Action labels must be non-verbal, expressed via gaze, gesture, posture, movement, or attention to objects in the room.
- Forbidden speech verbs in actions: ask, say, speak, tell, talk, answer, reply, question, demand, request, plead, whisper, shout, yell, call, sing, hum.
- Prefer naming the anchor/object in actions (e.g., `couple's portrait`, `cardboard box`, `hinge`, `baby socks`). Pronouns are allowed when unambiguous.
- Prefer object-anchored, silent actions: `Hold the gaze`, `Lower your gaze`, `Glance at the couple's portrait`, `Look at the cardboard box`, `Point to the hinge`, `Count breaths`, `Step back`, `Shift your weight`, `Rest a hand on the beam`, `Trace a circle in dust`.
- Touching Leon is allowed. Any touch action must include a conditional Game Over branch when Anger or Stress exceed safe thresholds (e.g., `Anger > 35` or `Stress > 60`). When below thresholds, apply reasonable deltas and continue.
- Diversity rule: Within a scene, do not repeat the exact same action phrase. Use ≥6 distinct action verbs across available choices.

- Scene Brief actions variance (cross-scene): Avoid reusing exact action phrases that appeared in other Scene Briefs; prefer fresh, object‑anchored phrasings per scene. Exception: gaze actions (hold/lower/raise gaze, glance/look/stare) may repeat across scenes.

Some relationships are gated by conditions, denoted in mathematical expressions.
Any relationship conditions are appended with a starting comma `,`.

Examples:
- For evaluating a variable `Stress` across passages, the relationship DSL looks like: `p03_eval_fear -> p04_go_panics "Act: Leer at Leon, 11 <= Stress <= 16"`.
- For evaluating node visit-count conditions, use function notation `visited([passage])`, where `passage` is the passage ID. For example: `visited(P10) >= 2` declares the relationship is relevant whenever `P10` passage has been visited at least twice.

Logical AND (`&&`) and logical OR (`||`) can be used for complex expressions. For example: `timer, 11 <= Stress <= 16 || visited(P10) >= 2`, which reads as "an automatic progression by timer that only occurs if Stress is between 11 and 16 or P10 has been visited at least twice."

When conditions aren't met, the corresponding story path becomes unavailable during runtime and vice-versa. 

**Important**: 
- Be extra careful to avoid narrative dead-ends due to lack of choices from impossible conditions. 
- After graph generation, perform a static analysis pass to deterministically assert no narrative paths remain perpetually blocked.
- Prioritize progression by gating relationships with low conditional values to reduce repetitive story navigation.
  - Passages gated by conditions should be traversable within one or two dialogue iterations.

## Technical guidelines
- Refer to [Structurizr's DSL documentation](https://docs.structurizr.com/dsl) for proper DSL syntax.
- Software System views are optional. Ensure all `component` & `container` views are explicitly declared.
- DSL does not support forward references. Define all relationships after their declarations.
- Naming & cross-references: follow the canonical scheme in `/docs/Plot-Graph.dsl` (IDs `cNN`, `sNN`, `pNN_<kind>`; cross-refs `cNN.sNN.pNN_<kind>`). Do not restate variants here.

## Plot-Device anchoring and engagement

Before generating components/passages, derive a Scene Brief from @Plot-Device.md for the specified chapter:
- Identify the H2 for the chapter and relevant H3 subsections.
- Extract 6–10 “plot anchors” (concrete nouns, actions, or phrases) that uniquely identify this chapter’s details. Examples: “HR video call,” “baby socks box,” “rented-out home, no base,” “Stoicism,” “Tibetan Buddhism,” “prayer,” “porn addiction,” “cardboard box at a door.”

### Passage micro-spec (every non–game-over passage)
Each description must contain (respect the global 100–200 char requirement):
- One plot anchor from the Scene Brief.
- One sensory image or physical action (sound, touch, movement, object).
- One decision pressure or forward hook (what tension this moment sets up).

Write complete sentences; paraphrase Plot-Device details instead of quoting verbatim. Do not invent lore that contradicts @Plot-Device.md.

### Anchor quota (per scene)
- ≥60% of regular passages must contain a named anchor.
- ≥30% must contain two anchors blended subtly (e.g., job loss + marriage tension).
- Game Over passages must reference the immediate physical consequence that plausibly stems from the prior anchor(s).

### NPC state mapping (theme → stat deltas)
Default delta magnitude 2..12; spikes up to 20 when directly preceding Game Over. Clamp to [0,100].
- Career shame, lost job: Stress +4..+8; Anger +0..+4 if challenged.
- Marriage conflict, boundary violations: Anger +6..+12; Stress +0..+6.
- Spiritual acceptance, prayer, Stoicism: Stress -6..-12; Anger -4..-8.
- Soft listening, de-escalation: Stress -2..-8; Anger -2..-8.
- Physical misstep toward Leon: Anger +10..+20; often leads to Game Over edges.

### Replay memory and unlocks
- Treat visited(Pxx) as cross-playthrough memory.
- Gate 1–2 deeper anchors behind visited(...) >= 2 so subsequent runs reveal added specifics (e.g., “HR video call” only unlocks after an earlier job-loss anchor).
- Keep gates low and reachable within 1–2 dialogue iterations.

### Gating heuristics (align conditions with emotion)
- Use Stress thresholds to govern “timer” risk and suffocation/exhaustion outcomes.
- Use Anger thresholds to govern immediate attack outcomes.
- When both are high, prefer the harsher branch; when both are low, unlock a calmer anchor or de-escalation thread.

### Timer rule (clarification)
- Every non–game-over passage MUST have at least one outgoing `timer` relationship.
- Only point timers to nodes that already fit the current emotional trajectory (reuse nodes to avoid bloat).

### Quality checks (hard requirements)
- No dead-ends: every regular passage has ≥1 explicit user action edge and 1 `timer` edge.
- At least one explicit user-choice path to a Game Over exists in every scene.
  - At least one of these GO edges must be unconditional: explicit `Act: ...` → `pNN_go` with no conditions; do not gate this path by state or visits; do not use timers.
- Include ≥1 cross-scene relationship from a component in the current scene to a component in the designated next scene (prefer `Act: …`; timers allowed, but avoid timer-only if a meaningful action exists).
- At least one unresolved thread persists across 3+ passages and is resolved or inverted in a later passage.
- At generation end, verify anchor quotas and stat clamping.
- Validate actions: no banned speech verbs; no duplicate action labels within the scene; touch actions include a GO branch under high Anger/Stress and non-GO branches otherwise.

### Two example descriptions (style only)
- “He rubs the HR glare from his eyes; the cardboard box tilts; one more paper slides, and you feel the floor test your patience and step.” 
- “Baby socks memory surfaces; he hushes you like prayer; Stoic breath in, breath out—fear measures whether your stillness holds.” 